class Solution:
    def jumpingNums(self, X):
        # code here
        while(X>=0):
            temp=X
            p=str(X)
            a=temp%10
            temp=temp//10
            count=0
            while(temp>0):
                b=temp%10
                diff=abs(a-b)
                if(diff==1):
                    count=count+1
                temp=temp//10
                a=b
            if(count==len(p)-1):
                return X
                break
            else:
                X=X-1
ob=Solution()
print(ob.jumpingNums(10))
---------------------------------------------------------------------------------
CODE IN C++
-------
class Solution {
  public:
  void bfs(long long x,long long num,long long &ans)
  {
      queue<long long> q;
      q.push(num);
      while(!q.empty())
      {
          num=q.front();
          q.pop();
          if(num<=x)
          {
              ans=max(ans,num);
              int p1=num%10;
              if(p1!=9)
              {
                  q.push((num*10)+(p1+1));
              }
              if(p1!=0)
              {
                  q.push((num*10)+(p1-1));
              }
          }
      }
  }
    long long jumpingNums(long long X) {
        // code here
        long long ans =0;
        for(long long i=1;i<=9 && i<=X;i++)
        bfs(X,i,ans);
        return ans;
    }
};

def insertion_sort(lst):
    for i in range(1, len(lst)):
        key = lst[i]
        j = i - 1
        while j >= 0 and key < lst[j]:
            lst[j + 1] = lst[j]
            j -= 1
        lst[j + 1] = key

# Example usage:
my_list = [4, 1, 7, 3, 9, 2]
insertion_sort(my_list)
print(my_list)

-------------------------------------------------------------------------------
PRINT ALL THE ELEMENTS WHETHER PRIME OR ARMSTRONG WITH ALL THE ELEMENTS COMBINATIONS IN THE LIST
--------------------------
l=[1,3,7,21]
def prime(s):
    if s>=1:
        for j in range(2,s//2+1):
            if s % j == 0:
                return "not prime"
                break
        else:
            return "prime"
    else:
        return "its a negtive number"
def armstrong(s):
    temp=s
    p=str(s)
    sum=0
    while(temp!=0):
        r=temp%10
        sum=sum+pow(r,len(p))
        temp=temp//10
    if(sum==s):
        return "is armstrong "
    else:
        return "not armstrong"

for i in range(len(l)):
    count=0
    for j in range(i+1,len(l)):
        if(count==0):
            s=str(l[i])
            s=int(s)
            print(s,prime(s))
            print(s,armstrong(s))
            count=count+1
        s=str(l[i])+str(l[j])
        s=int(s)
        print(s,prime(s))
        print(s,armstrong(s))
OUTPUT:
----
1 prime
1 is armstrong 
13 prime
13 not armstrong
17 prime
17 not armstrong
121 not prime
121 not armstrong
3 prime
3 is armstrong 
37 prime
37 not armstrong
321 not prime
321 not armstrong
7 prime
7 is armstrong 
721 not prime
721 not armstrong

OTHER WAY-----------
---------------
l=[1,3,7,21]
def prime(s):
    if s>=1:
        for j in range(2,s//2+1):
            if s % j == 0:
                break
        else:
            return 1
    else:
        return 0
def armstrong(s):
    temp=s
    p=str(s)
    sum=0
    while(temp!=0):
        r=temp%10
        sum=sum+pow(r,len(p))
        temp=temp//10
    if(sum==s):
        return 1
    else:
        return 0
def result_check():
    if(result1==result2):
        print(s,"its armstrong as well prime")
    elif(result1):
        print(s,"prime")
    elif(result2):
        print(s,"armstrong")
    else:
        pass

for i in range(len(l)):
    count=0
    for j in range(i+1,len(l)):
        if(count==0):
            s=str(l[i])
            s=int(s)
            result1=prime(s)
            result2=armstrong(s)
            count=count+1
            result_check()
        s=str(l[i])+str(l[j])
        s=int(s)
        result1=prime(s)
        result2=armstrong(s)
        result_check()
OUTPUT:
1 its armstrong as well prime
13 prime
17 prime
3 its armstrong as well prime
37 prime
7 its armstrong as well prime
> 
        